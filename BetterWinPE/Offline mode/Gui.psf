<File version="3.2">
  <FileID>647c9fde-df0a-4c7a-b2a7-931cb6d53d77</FileID>
  <LastExport>133001876609176865</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAADRUSURBVHhe7d0HXNX1/sdxygnIUBRRUYaACCIC
spEhQxFQce+ZpmXDlmmalpnaMldm2rJpe09t3dbtNm6P/+227r3Vvbd1m/d2R7ne/+/3d0BRf1im
IMjr+ej14MD5nW3n9/md6QUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaKzadO93UpuYgpvaROUQERHR8ZBZr1et
5mvnF51zj3/cAPn16E9ERETHQXa9XrWar52dFOzCbaL6ERER0XGQXa9XreZrxwBARER0fMUAQERE
1ARjACAiImqCMQAQERE1wRgAiIjqu+7ZB/wtp6qafyOq2xgAiIjqucA+lQpMHCKv8P5qEV2itsnD
5R9bvHcw8O2eo1ZhmWodkbX3ML6ROWodnmX+ZpaJPvg4nezhzDKu+xEdEAMAEVG9lSO/mHz5JQyW
V8cknXvxahWOnCWv0GwF9BpkVvJm5W5W4v49CtQ1pUyhSQN0QkiyvDqnysf8PSi+SG1j+jm/e4dn
ysvsZweFZl1S1Sw0TS3M7k59Bsjf9bSJ9o8BgIio3sqRb3Se2vQs1ZmLLtc7H/xFz7/8urKGzlbL
7gVmyz9brcPS1C1/kq667jZNOuksZQ+eppT+ozTn4nXacP1Wrd14vVJyKtS+z2CNmnGuItMGK7Vs
inrnj9CIOcv1wN13yz/CDgxup0+0LwYAIqJ6K8esmHPVNWuMSsfN0YRTF2jwxNOVPfxUtY7uv3cA
CDMDwHV3PKSLlq3XjXc/qVuuv1GXrd/iDACrNtykK665XZtuulXLLr9B5124Ujc/+rLWXb5cUQXT
dOOW2xUUlcYAQD8bAwARUb3leQrA3z4FEJykHtlDFNQzX80j++99CsAOAF1zx+uqzVt1/qLLdP6l
1+n2W+/QaQsu1zU336trb9mqRcvX6bylq7Vmw22ac95FWrnpHq1cvkJtegzQpVdvVPvodAYA+tkY
AIiI6i37Sv9cBfYZpsDEwfKJK5Nfr3K17VMpv9gi5/l/u4y/GRJCEgeofVx/dU0pV2ifErWJ6a/I
jMHq0W+4Oif0V8uIXMXlDlM7s4xdLiRxoNqZYSI4oVh+zum4nT7RvhgAGml+0blq1S1dJ3RJc3a7
LUNEDTT7an+7st+bffX/vpW2fReAfcW/t31EIDzTeWW/j9ndMixTLbtlOO8EsE8XtAzLcP7uHWHf
HZDlOVyNdw4QHSoGgMaYWeE365yiblmj1K9svLyCk92XIyIiqiUGgEaYj5nwQ5IGad6qO/Toww8p
IatCfmZrwNdlWSIiIrcYABphzTv1VeWc5Xrxrff10V/+otVXr1NgeLq87UOJLssTEREdGANAI8w+
5+/VNk65ExfqkmUr5NUm1nU5IiKi2mIAaKTZF/sE9ChQUJz98BC2/ImI6PBiAGjE2fcMe9vPBXfZ
j4iI6FAxABARETXBGACIiIiaYAwARERETTAGACIioiYYAwAREVETjAGAiIioCcYAQERE1ARjACAi
ImqCMQAQERE1wRgAiIiImmAMAERERE0wBgAiIqImGAMAERFRE4wBgIiIqAnGAEBERNQEq5cBwC+6
n1qGZeqEzqk6sUvdZI+7lTkNe1pu56G+s+fDnp+6uMwnVP30jshuMJe3uhbdMo7oMtvLZmsdkWUu
W67raTTmWnRNP4rXj/tpEBH9kuplALB3Vl2SBqrvgPFKLh5XJ9nj7txngHNabuehvvM256NT4oC6
ucwlnp9tYwvkE5njevrHotbhWYpIqziyy2wuW4qpfVx/eUdmu55OY81eP5EZg4/4+rG1M9ePz3F2
/RBR/VbnA4BdEfqbLblXfveWtGe3du7Y4WnnTlXbudPzt127dmn3rp01ltm37B5z2F3m535/r5Hd
/4WXfyff7jnOlrHbeamv7IrLXu7tL7zinK+al8+xe9e+8773MrrkXK49+18nJns97DbHtWrjLfLq
mOR6Huo7u+UfnlauT/729/1v5xodqPoy7pf52x5z/dx05wM6oVOKc3u6nV5jq7nZ8o/JHqrPPv+y
9v8PzO/2dt17+1dXvWzV8rvN9XPtTVvlFZJ83Fw/RFT/1fkAYB8G75xYoq+++bbqbq7Knp16+43X
9M77n1T9wWPX7j1Vu/b34/9+rNpVu8+++FLt4wvVymxpuZ2X+spu6bXrWaC/fvpZ1Tnz2LXjf3r7
zTf1z/8evDKszQ///GfVroM9tu03zgDg2939fNRn9mFtu+V+KF/87c96860/6k/vvqff/997cr+l
PV55/fdq1iX1uFnBeZlhJnvwlKpLV9NuvfPWG3r/o79X/f7LPPub3zrHyQBARL+2ehkAQnoX6++f
feHcce3evdu54//vv/6hDauv1uZNN+uue+7RY48/qWtWX6Nnn31ed99xl9758GO9/MJz2v7U07ph
43XaeP1teva5bXpy+5O6954H9fGn33i2js3x2ayPPvmbguL6N4gBoG1svj78y8fO+aq+zN9//anu
uv1OvfryK7rt1q16/y9/1RuvvarXfvua7rv7Tj361JN6/qUX9NLzz+nOO+7V4489qi233qzrNm/W
b95456DLe/9j2xvMAGCfn+5TNEY7dvzknLfq81nz/D732P26dPmVuvehZ/TN199px85dBy23d9mX
XjuuBoATOvdVRtkk5xEhq/pyfv7xh3rmhdf07Zef6r6tW3XvfQ/r0Yce0+MPP6lH7r9P9z++TTt2
mX8/B1w/T2w3wx8DABEdQfU2AHz6+f4DwH/++ZVeevEVPf3Q/Vq+4nJtuWmLVq64Qg9uvVcXXXCx
Nl1/uzZvvlmP3XW/Fpy/WJtu2KLbbrvRDAI36pFHn9YfP9i3cq2+U/z4rw1rAPjTRzUGALPy/u+/
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
I30NABFRjRgAyMl+FGlg78HOFv+J3bIVlT1C8QVj1CZhiOvyDSH7LoC2sQXKLJ+snMFTlV0xpfbM
/vnDZpjlqn8/4OfP1G/INGfl7x3Bc+ZEdHzEAECeumfLL7bIec7fvhiwTVypfGIHOp8X31DfIuZn
8o7Mdt6jb5+Xr+sa7av/iYhcYgCgfZkVffUXlDg5X1DCFi8R0fHYLxoA/KJz7nHeO2wWJiIiosaf
Xa9XreYBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2dl9f/A/YFQi9ZuD+kAAAAAElFTkSuQmCC</Preview>
  <Form>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
nvJqT3m1p7zaU17t55JXe6PZ+H1XfYu62p39hd/6MQz5i4urYb+qKd/TbPxpNv40G3+ajT/Nxp9m
40+z8afZ+NNs/Gk2/hOYjd9XdnxDYXN3W/+31TXYL17XLH/VuuZpNv40G3+ajT/Nxp9m40+z8afZ
+NNs/Gk2/jQb/+Fm4/d9KfMNVcwPkipb/n/pbP8nvuj85Db+lr72N3zW+WhX+xc/6/xJi1Hq2dX+
7Gp/drU/u9qfXe3PrvZnV/uzq/3Z1f7san92tT+72p9d7c+u9mdX+7Or/dnV/hM1f7y9q/0+zZhf
wDOc+kVFZe4RAPnLtceQm3Lsfa+/X4vKfFXI458TJXpgSt9TUubjsL9o/OjsN+gRYW8LHZ39qaSI
7pzO9wwZnf2lj2mq2yjIjzmdYfumfdF9bZpyfOg0B37oLOfjPf3NRzhfVOb/gjLnx8m8WZTzB8vi
tZ3bfzwF+4ZcsnxbLnk9+kMK/ugb0sq9kv+fJPIenNn3Fcr7PPivJuZPB8FB/RjCP06fenKLi9t8
uC3djaW+2L3860N7W4n/Ysr8PhnYV8qxdpJ2j+qCLsmbwN99/dQf98CrR/WINCj1BlORh+RjF3eH
66s7+EUZlOn2Qxi7TfANLBylVm9Lf58Hf2D9KfLvZuIPTuu7emX9PvTjFOvVD7/9s/33/wA/ZDHg
hsMBAA==</Form>
  <Code><![CDATA[
$d = "abcdefghijklmnopqrstuvwxyz"
for ($i = 0; $i -lt $d.Length; $i++)
{
	$path = $d[$i] + ":"
	$a = Test-Path -Path $path
	if ($a)
	{
		
		$e = Test-Path -Path "$path\Code"
		if ($e)
		{
			if (Test-Path -Path "$path\Image")
			{
				Write-Host $path
				
				$Global:Chemin = "$path"
				$Global:ImgChemin = "$path\Image"
			}
			
		}
	}
}
$Global:Action = ""
$global:WidgetPath = "$global:Chemin\Code\widget\button.aem"
$Date = Get-Date -Format "yyyyddMM"
function getActualTimestamp
{
	$stopwatch = get-date -uformat %s
	$stopwatch = [int]([string]$stopwatch.Split(",")[0])
	return $stopwatch
}
function HideAllPanel
{
	$Ghost.Controls | Where{ $_.GetType().Name -eq "Panel" } | ForEach{
		$_.Visible = $false
		
	}
}
function ShowValidationMenu
{
	HideAllPanel
	$ValiderMenu.Visible = $true
}
function RestartGhost
{
	start -FilePath "$global:Chemin\Code\bin\x64\Gui.exe"
	(Get-Content -path $global:WidgetPath -Raw) -replace " ", '' | Set-Content -Path $global:WidgetPath
	$Ghost.Close()
}

$Ghost_Load = {
	$resolution = @([System.Windows.Forms.Screen]::AllScreens.WorkingArea.Size.Width)
	$resolution += [System.Windows.Forms.Screen]::AllScreens.WorkingArea.Size.Height
	$coefficient = @()
	$coefficient += [Math]::Round(($resolution[0] / $panel1.Width))
	$coefficient += [Math]::Round(($resolution[1] / ($panel1.Height + 100)))
	Write-Error $coefficient[0]
	Write-Error $coefficient[1]
	Write-Error $resolution[0]
	Write-Error $resolution[1]
	$Ghost.Width = $resolution[0]
	$Ghost.Height = $resolution[1]
	$xCaisse = 10
	$yCaisse = 10
	$xPc = 10
	$yPc = 10
	foreach ($line in Get-Content $global:WidgetPath)
	{
		if ($line.Split(",")[0] -eq "Caisse")
		{
			Make-Button -ButtonName $line.Split(",")[1] -ButtonType $line.Split(",")[0] -SetZ "$xCaisse" -SetX "$yCaisse"
			
			$xCaisse = $xCaisse + 150
			if ($xCaisse -gt 400)
			{
				$xCaisse = 10
				$yCaisse += 50
			}
			
		}
		else
		{
			Make-Button -ButtonName $line.Split(",")[1] -ButtonType $line.Split(",")[0] -SetZ "$xPc" -SetX "$yPc"
			
			$xPc = $xPc + 150
			if ($xPc -gt 400)
			{
				$xPc = 10
				$yPc += 50
			}
			
		}
		
	}
	#TODO: Initialize Form Controls 
	$Ghost.Controls | Where{ $_.GetType().Name -eq "Panel" } | ForEach{
		if ($_ -eq $panelTools)
		{
		}
		else
		{
			$_.add_MouseClick({
					$panelTools.Visible = $false
				})
			$_.Location = '0,0'
			$_.Visible = $false
			$_.Width = $Ghost.Width
			$_.Height = $Ghost.Height - 150
			$_.Controls | Where{ $_.GetType().Name -eq "Button" } | ForEach{
				$_.BackColor = [System.Drawing.ColorTranslator]::FromHtml("#5e83ff")
				$_.FlatStyle = [System.Windows.Forms.FlatStyle]::Flat
				
			}
			$_.Controls | Where{ $_.GetType().Name -ne "Panel" } | ForEach{
				$x = $_.Location.X
				$x = [System.Math]::Round(($x * $coefficient[0]))
				$y = $_.Location.Y
				$y = [System.Math]::Round(($y * ($coefficient[1])))
				$_.Location = New-Object System.Drawing.Point($x, $y) # + [int32]$coefficient[0]
				
				$x = $_.Size.Width
				$x = [System.Math]::Round(($x * $coefficient[0]))
				$y = $_.Size.Height
				$y = [System.Math]::Round(($y * ($coefficient[1])))
				$_.Size = New-Object System.Drawing.Point($x, $y) # + [int32]$coefficient[0]
				
				Write-Error FontSize
				Write-Error ($resolution[1] / $_.Font.Size)
				$_.Font = New-Object System.Drawing.Font("Lucida Console", ($_.Font.Size * (($_.Font.Size / $coefficient[1]))/2), [System.Drawing.FontStyle]::Regular)
				Write-Error $_.Font.Size
				
			}
		}
	}
	$Ghost.Controls | Where{ $_.GetType().Name -ne "Panel" } | ForEach{
		$x = $_.Location.X
		$x = [System.Math]::Round(($x * $coefficient[0]))
		$y = $_.Location.Y
		$y = [System.Math]::Round(($y * ($coefficient[1])))
		$_.Location = New-Object System.Drawing.Point($x, $y) # + [int32]$coefficient[0]
		
		$x = $_.Size.Width
		$x = [System.Math]::Round(($x * $coefficient[0]))
		$y = $_.Size.Height
		$y = [System.Math]::Round(($y * ($coefficient[1])))
		$_.Size = New-Object System.Drawing.Point($x, $y) # + [int32]$coefficient[0]
	}
	$Ghost.Controls | Where{ $_.GetType().Name -eq "Button" } | ForEach{
		$_.BackColor = [System.Drawing.ColorTranslator]::FromHtml("#83C9F4")
		$_.FlatStyle = [System.Windows.Forms.FlatStyle]::Flat
		$_.FlatAppearance.BorderSize = 2
		$_.FlatAppearance.BorderColor = [System.Drawing.ColorTranslator]::FromHtml("#83C9F4")
		$_.Font = New-Object System.Drawing.Font("Lucida Console", ($_.Font.Size * ($_.Font.Size / $coefficient[1])), [System.Drawing.FontStyle]::Regular)
		
	}
	#	$Ghost.BackColor = [System.Drawing.ColorTranslator]::FromHtml('#A3D5FF')
	$panel1.Visible = $true
	#	$panel2.Visible = $true
	
	
}
$data = @("1", "2")
$data.Length
function ParseDism ([string]$parameter1)
{
	if ($parameter1.Contains("Version"))
	{
	}
	else
	{
		if ($parameter1 -match ".*\d+.*")
		{
			$data = $parameter1.replace("=", "")
			$data = $data.replace("[", "")
			$data = $data.replace("]", "")
			$data = $data.replace(" ", "")
			$data = $data.replace("%", "")
			$data = $data.Split(".")[0]
			$value = $data
			Write-Error $value
			return $value
		}
		else
		{
		}
		
	}
}

$buttonCaisse_Click = {
	HideAllPanel
	$RestorationCaisse.Visible = $true
	$Global:Choix_PCCaisse = "Caisse"
	
}
###########################################################
# 				button des caisses                        #
###########################################################

$buttonHPELITEMONO_Click = {
	$global:Model = "HP-ELITEMONO"
	ShowValidationMenu
}


###########################################################
# 				fin du button des caisses                 #
###########################################################


$buttonQuitter_Click = {
	$Ghost.Close()
	
}




$buttonValider_Click = {
	#	tentative d'améliorée les performance du l'ordinateur
	powercfg -duplicatescheme 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
	powercfg /s 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
	rundll32.exe advapi32.dll, ProcessIdleTasks
	[System.GC]::Collect()
	HideAllPanel
	$lastPourcentage = 0
	$afterValidation.Visible = $true
	$start = getActualTimestamp
	
	if ($global:Action -eq "Restauration")
	{
		if (Test-Path -Path $global:Chemin\Code\Diskpart\$global:Model.txt) # Verifie si il existe un script diskpart pour la machine selectionée
		{
			diskpart /s  $global:Chemin\Code\Diskpart\$global:Model.txt
			
		}
		else
		{
			diskpart /s $global:Chemin\Code\Diskpart\$Global:Choix_PCCaisse.txt # si il n'y a oas de script alors lancer le script basic du Pc ou Caisse
			
		}
		
		$ErrorLabel.Text = "Installation de l'image"
		$ErrorLabel.Visible = $true
		
		# lance dism en processus externe 
		if ($Global:Choix_PCCaisse -eq "Caisse")
		{
			$pourcentageLabel.Text = "0%"
			Dism /apply-image /imagefile:$Global:ImgChemin\Images\$Global:Choix_PCCaisse\$Global:Model\Actif\$Global:Model.wim  /index=1 /ApplyDir=K: | ForEach-Object {
				
				if ($_.Contains("Version"))
				{
				}
				else
				{
					if ($_ -match ".*\d+.*")
					{
						$data = $_.replace("=", "")
						$data = $data.replace("[", "")
						$data = $data.replace("]", "")
						$data = $data.replace(" ", "")
						$data = $data.replace("%", "")
						$data = $data.Split(".")[0]
						$progressbar2.Value = [int]$data
						$pourcentageLabel.Text = "$data%"
						$time = getActualTimestamp
						$s = $time - $start
						$lastSeconde = $s
						$round += 1
						$secondeRestant = (($s / $data) * 100) - ($data/1)
						$minRestant = ($secondeRestant / 60).ToString()
						$minRestant = $minRestant.Split(".")[0]
						$minRestant = $minRestant.Split(",")[0]
						$timeLabel.Text = "estimation : $minRestant min"
						$Ghost.Refresh()
						
					}
					else
					{
					}
				}
				
			}
			$timeLabel.Text = "Finit"
			
			bcdboot.exe K:\Windows
			cmd.exe /c "Bcdedit /Store K:\Boot\BCD /set {bootmgr} device partition=K:"
			cmd.exe /c "Bcdedit /Store K:\Boot\BCD /set {default} device partition=K:"
			cmd.exe /c "Bcdedit /Store K:\Boot\BCD /set {default} osdevice partition=K:"
			
		}
		if ($global:Choix_PCCaisse -eq "Pc") # PC
		{
			$path = $global:ImgChemin
			$type = $Global:Choix_PCCaisse
			$Model = $global:Model
			$Job = Start-Job -ScriptBlock {
				$input.MoveNext()
				$path = $input.current[0]
				$type = $input.current[1]
				$model = $input.current[2]
				Dism /apply-image /imagefile:"$path\Images\$type\$model\Actif\$model-D.wim" /index=1 /ApplyDir=D: | ForEach-Object {
					if ($_.Contains("Version")) { }
					else
					{
						if ($_ -match ".*\d+.*")
						{
							$data = $_.replace("=", "")
							$data = $data.replace("[", "")
							$data = $data.replace("]", "")
							$data = $data.replace(" ", "")
							$data = $data.replace("%", "")
							$data = $data.Split(".")[0]
							Write-Output $data
							$data
						}
						else
						{
						}
						
					}
					
				}
				
			} -InputObject @($path, $type, $Model);
			$progressbar2.Visible = $true
			$path = $global:ImgChemin
			$type = $Global:Choix_PCCaisse
			$Model = $global:Model
			$Job2 = Start-Job -ScriptBlock {
				$input.MoveNext()
				$path = $input.current[0]
				$type = $input.current[1]
				$model = $input.current[2]
				Dism /apply-image /imagefile:"$path\Images\$type\$Model\Actif\$Model-C.wim"  /index=1 /ApplyDir=K: | ForEach-Object {
					if ($_.Contains("Version")) { }
					else
					{
						if ($_ -match ".*\d+.*")
						{
							$data = $_.replace("=", "")
							$data = $data.replace("[", "")
							$data = $data.replace("]", "")
							$data = $data.replace(" ", "")
							$data = $data.replace("%", "")
							$data = $data.Split(".")[0]
							Write-Output $data
							$data
						}
						else
						{
						}
						
					}
					
				}
			} -InputObject @($path, $type, $Model);
			Get-WmiObject Win32_process -filter 'name = "dism.exe"' | foreach-object { $_.SetPriority(256) } # set dism's process priority to real time
			While (1)
			{
				if ($Job.State -eq "Running") { }
				else
				{
					if ($Job2.State -eq "Running") { }
					else
					{
						bcdboot.exe K:\Windows
						cmd.exe /c "Bcdedit /Store K:\Boot\BCD /set {bootmgr} device partition=K:"
						cmd.exe /c "Bcdedit /Store K:\Boot\BCD /set {default} device partition=K:"
						cmd.exe /c "Bcdedit /Store K:\Boot\BCD /set {default} osdevice partition=K:"
						Restart-Computer -Force
						break
					}
				}
				$globalPourcentage = ($progressbar1.Value + $progressbar2.Value)/2
				$pourcentageLabel.Text = $globalPourcentage.ToString()
				$pourcentageLabel.Text = $pourcentageLabel.Text + "%"
				$data = $globalPourcentage
				Receive-Job -Job $Job2 | ForEach-Object {
					$progressbar2.Value = $_
				}
				Receive-Job -Job $Job | ForEach-Object {
					$progressbar1.Value = $_
				}
				if ($lastPourcentage -eq $globalPourcentage)
				{
					Start-Sleep -Seconds 5
				}
				else
				{
					$Ghost.Refresh()
					$lastPourcentage = $globalPourcentage
				}
				$time = getActualTimestamp
				$s = $time - $start
				$lastSeconde = $s
				$secondeRestant = (($s / $data) * 100) - ($data/1)
				$minRestant = ($secondeRestant / 60).ToString()
				$minRestant = $minRestant.Split(".")[0]
				$minRestant = $minRestant.Split(",")[0]
				$timeLabel.Text = "estimation : $minRestant min"
				
			}
			
		}
		bcdboot.exe K:\Windows
		cmd.exe /c "Bcdedit /Store K:\Boot\BCD /set {bootmgr} device partition=K:"
		cmd.exe /c "Bcdedit /Store K:\Boot\BCD /set {default} device partition=K:"
		cmd.exe /c "Bcdedit /Store K:\Boot\BCD /set {default} osdevice partition=K:"
		
	}
	
	if ($global:Action -eq "Sauvegarde")
	{
		
		if (Test-Path -Path $Global:ImgChemin\Images\$Global:Choix_PCCaisse\$global:Model\Actif\*.wim)
		{
			Ni -path "$Global:ImgChemin\Images\$Global:Choix_PCCaisse\$global:Model\OLD\" -Name "$Date" -ItemType directory
			if ($global:Choix_PCCaisse -eq "Pc")
			{
				Move-Item -Path "$Global:ImgChemin\Images\$Global:Choix_PCCaisse\$global:Model\Actif\$global:Model-C.wim" -Destination "$Global:ImgChemin\Images\$Global:Choix_PCCaisse\$global:Model\OLD\$Date"
				Move-Item -Path "$Global:ImgChemin\Images\$Global:Choix_PCCaisse\$global:Model\Actif\$global:Model-D.wim" -Destination "$Global:ImgChemin\Images\$Global:Choix_PCCaisse\$global:Model\OLD\$Date"
			}
			else
			{
				Move-Item -Path "$Global:ImgChemin\Images\$Global:Choix_PCCaisse\$global:Model\Actif\$global:Model.wim" -Destination "$Global:ImgChemin\Images\$Global:Choix_PCCaisse\$global:Model\OLD\$Date"
				
			}
		}
		else
		{
			New-Item -path $Global:ImgChemin\Images\$Global:Choix_PCCaisse\ -Name $global:Model -ItemType directory
			New-Item -path $Global:ImgChemin\Images\$Global:Choix_PCCaisse\$global:Model\ -Name "Actif" -ItemType directory
			New-Item -path $Global:ImgChemin\Images\$Global:Choix_PCCaisse\$global:Model\ -Name "OLD" -ItemType directory
		}
		$path = $global:ImgChemin
		$type = $Global:Choix_PCCaisse
		$Model = $global:Model
		if ($global:Choix_PCCaisse -eq "Caisse")
		{
			
			Dism /Capture-Image /ImageFile:"$path\Images\$type\$model\Actif\$model.wim" /CaptureDir:C:\ /Name:Os /Bootable /Compress:fast /scratchdir:"$path\Temp" | ForEach-Object {
				if ($_.Contains("Version")) { }
				else
				{
					if ($_ -match ".*\d+.*")
					{
						$data = $_.replace("=", "")
						$data = $data.replace("[", "")
						$data = $data.replace("]", "")
						$data = $data.replace(" ", "")
						$data = $data.replace("%", "")
						$data = $data.Split(".")[0]
						Write-Output $data
						$globalPourcentage = ($progressbar1.Value + $progressbar2.Value)/2
						$pourcentageLabel.Text = $globalPourcentage.ToString()
						$pourcentageLabel.Text = $pourcentageLabel.Text + "%"
						$progressbar2.Value = $data
						$time = getActualTimestamp
						$s = $time - $start
						$lastSeconde = $s
						$secondeRestant = (($s / $data) * 100) - ($data/1)
						$minRestant = ($secondeRestant / 60).ToString()
						$minRestant = $minRestant.Split(".")[0]
						$minRestant = $minRestant.Split(",")[0]
						$timeLabel.Text = "estimation : $minRestant min"
						
						$Ghost.Refresh()
						
					}
					else
					{
					}
					
				}
				
			}
			$Ghost.Refresh()
			
		}
	}
	if ($global:Choix_PCCaisse -eq "Pc")
	{
		$global:dism1 = 0
		$global:dism2 = 0
		$Job = Start-Job -ScriptBlock {
			$input.MoveNext()
			$path = $input.current[0]
			$type = $input.current[1]
			$model = $input.current[2]
			Dism /Capture-Image /ImageFile:"$path\Images\$type\$model\Actif\$model-C.wim" /CaptureDir:C:\ /Name:Os /Bootable /Compress:fast | ForEach-Object {
				if ($_.Contains("Version")) { }
				else
				{
					if ($_ -match ".*\d+.*")
					{
						$data = $_.replace("=", "")
						$data = $data.replace("[", "")
						$data = $data.replace("]", "")
						$data = $data.replace(" ", "")
						$data = $data.replace("%", "")
						$data = $data.Split(".")[0]
						Write-Output $data
						$data
					}
					else
					{
					}
					
				}
				
			}
			
		} -InputObject @($path, $type, $Model);
		$Job2 = Start-Job -ScriptBlock {
			$input.MoveNext()
			$path = $input.current[0]
			$type = $input.current[1]
			$model = $input.current[2]
			Dism /Capture-Image /ImageFile:"$path\Images\$type\$model\Actif\$model-D.wim" /CaptureDir:D:\ /Name:Data /Bootable /Compress:fast | ForEach-Object {
				if ($_.Contains("Version")) { }
				else
				{
					if ($_ -match ".*\d+.*")
					{
						$data = $_.replace("=", "")
						$data = $data.replace("[", "")
						$data = $data.replace("]", "")
						$data = $data.replace(" ", "")
						$data = $data.replace("%", "")
						$data = $data.Split(".")[0]
						Write-Output $data
						$data
					}
					else
					{
					}
					
				}
				
			}
			
		} -InputObject @($path, $type, $Model);
		while ($true)
		{
			if ($Job.State -eq "Running") { }
			else
			{
				if ($Job2.State -eq "Running") { }
				else
				{
					$timeLabel.Text = "estimation : 0 min"
					
					break
				}
			}
			$globalPourcentage = ($progressbar1.Value + $progressbar2.Value)/2
			$pourcentageLabel.Text = $globalPourcentage.ToString()
			$pourcentageLabel.Text = $pourcentageLabel.Text + "%"
			Receive-Job -Job $Job2 | ForEach-Object {
				$progressbar2.Value = $_
			}
			Receive-Job -Job $Job | ForEach-Object {
				$progressbar1.Value = $_
			}
			if ($lastPourcentage -eq $globalPourcentage)
			{
				Start-Sleep -Seconds 5
			}
			else
			{
				$data = $globalPourcentage
				$time = getActualTimestamp
				$s = $time - $start
				$lastSeconde = $s
				$secondeRestant = (($s / $data) * 100) - ($data/1)
				$minRestant = ($secondeRestant / 60).ToString()
				$minRestant = $minRestant.Split(".")[0]
				$minRestant = $minRestant.Split(",")[0]
				$timeLabel.Text = "estimation : $minRestant min"
				$Ghost.Refresh()
				$lastPourcentage = $globalPourcentage
			}
		}
		
	}
	#	Restart-Computer -Force
}



$buttonRetour_Click = {
	HideAllPanel
	$panel1.Visible = $true
	
}

$DebugLabel_Click = {
	#TODO: Place custom script here
	
}

$ValiderMenu_Paint = [System.Windows.Forms.PaintEventHandler]{
	$imageExiste = Test-Path -Path $Global:ImgChemin\Images\$Global:Choix_PCCaisse\$Global:Model\Actif\$Global:Model.wim
	if ($imageExiste -eq $true)
	{
		$DebugLabel.Text = "Image trouver  $global:Action"
	}
	else
	{
		$DebugLabel.Text = "Image introuvable  $global:Action"
	}
	
}

###########################################################
# 				Choice Resto / Sauve                      #
###########################################################

$buttonSauvegarde_Click = {
	HideAllPanel
	$Global:Action = "Sauvegarde"
	$RestorationMenu.Visible = $true
	
	
}
$buttonRestauration_Click = {
	HideAllPanel
	$RestorationMenu.Visible = $true
	$Global:Action = "Restauration"
}

$buttonInfo_Click = {
	wmic logicaldisk get name | ForEach-Object {
	}
	$Form = New-Object System.Windows.Forms.Form
	$Form.Width = 200
	$Form.Height = 400
	$Form.AutoScale = $true
	$Form.BackColor = [System.Drawing.ColorTranslator]::FromHtml("#0a1d33")
	$Form.FormBorderStyle = 'None'
	$Form.StartPosition = 'CenterScreen'
	$x = 25
	$y = 50
	$demoarrayList = New-Object -TypeName 'System.Collections.ArrayList';
	$demoarrayList.Add("powershell.exe|Shell")
	$demoarrayList.Add("taskmgr.exe|Taskmanager")
	$demoarrayList.Add("\\AEM-GHOST\srv-projet\Utilities\keyfinder.exe|KeyFinder")
	foreach ($v in $demoarrayList)
	{
		$y += 25
		$v = $v.Split("|")
		$btn = Make-Button-Exec -Name $v[1] -path $v[0] -x $x -y $y
		$Form.Controls.Add($btn)
		
	}
	
	$exitLabel = New-Object 'System.Windows.Forms.Label'
	$exitLabel.Text = "°"
	$exitLabel.ForeColor = [System.Drawing.ColorTranslator]::FromHtml("#ff0000")
	$exitLabel.FlatStyle = 'Flat'
	$exitLabel.Font = New-Object System.Drawing.Font("Microsoft Sans Serif", 25, [System.Drawing.FontStyle]::Regular)
	$exitLabel.Location = New-Object System.Drawing.Point(5, 5)
	$exitLabel.add_Click({
			$Form.Close()
		})
	
	$Form.Controls.Add($exitLabel)
	$Form.Controls.Add($cmdBtn)
	$Form.ShowDialog()
	
}


$AddButtonPanel_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$AddVMButton_Click = {
	#TODO: Place custom script here
	HideAllPanel
	$AddButtonPanel.Visible = $true
}

$buttonAnnuler_Click = {
	#TODO: Place custom script here
	
}
Function Make-Button([string]$ButtonName, [string]$ButtonType, [string]$SetZ, [string]$SetX)
{
	$Button = New-Object system.Windows.Forms.Button
	$Button.text = $ButtonName
	$Button.width = $ButtonName.Length * 12
	$Button.height = 28
	$Button.location = New-Object System.Drawing.Point($SetZ, $SetX)
	$Button.Font = New-Object System.Drawing.Font('Arial', 10)
	$Button.FlatStyle = [System.Windows.Forms.FlatStyle]::Flat
	$Button.FlatAppearance.BorderSize = 0
	$Button.ForeColor = [System.Drawing.ColorTranslator]::FromHtml("#ffffff")
	$Button.BackColor = [System.Drawing.ColorTranslator]::FromHtml("#515582")
	
	$Button.tag = $ButtonType #<- this is where the answer was. Throwing my desired callback into an unused property of the the Button. in this case, i used _.Tag
	$Button.Add_Click{
		$Global:Choix_PCCaisse = $this.tag
		$global:Model = $this.text
		HideAllPanel
		ShowValidationMenu
		
	}
	if ($ButtonType -eq "Caisse") { $RestorationCaisse.Controls.AddRange(@($Button)) }
	if ($ButtonType -eq "PC") { $RestorationPc.Controls.AddRange(@($Button)) }
	
	
}


$buttonPC_Click = {
	HideAllPanel
	$RestorationPc.Visible = $true
	$Global:Choix_PCCaisse = "Pc"
	
}

$progressbar1_Click = {
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]$ListView,
		[Parameter(Mandatory = $true)]
		[int]$ColumnIndex,
		[System.Windows.Forms.SortOrder]$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
	
	if ($Clear)
	{
		$ListView.Items.Clear();
	}
	
	$lvGroup = $null
	if ($Group -is [System.Windows.Forms.ListViewGroup])
	{
		$lvGroup = $Group
	}
	elseif ($Group -is [string])
	{
		#$lvGroup = $ListView.Group[$Group] # Case sensitive
		foreach ($groupItem in $ListView.Groups)
		{
			if ($groupItem.Name -eq $Group)
			{
				$lvGroup = $groupItem
				break
			}
		}
		
		if ($null -eq $lvGroup)
		{
			$lvGroup = $ListView.Groups.Add($Group, $Group)
		}
	}
	
	if ($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{
			$listitem = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if ($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if ($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if ($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if ($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (
		[ValidateNotNull()]
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
		 ,
		[Parameter(Position = 2, Mandatory = $false)]
		[Switch]$LeaveSingleChart
	)
	
	$count = 0
	if ($LeaveSingleChart)
	{
		$count = 1
	}
	
	while ($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while ($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while ($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if ($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
		[ValidateNotNull()]
		[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
		[ValidateNotNull()]
		[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}



<#
	.SYNOPSIS
		Sets the emulation of the WebBrowser control for the application.
	
	.DESCRIPTION
		Sets the emulation of the WebBrowser control for the application using the installed version of IE.
		This improves the WebBrowser control compatibility with newer html features.
	
	.PARAMETER ExecutableName
		The name of the executable E.g. PowerShellStudio.exe.
		Default Value: The running executable name.
	
	.EXAMPLE
		PS C:\> Set-WebBrowserEmulation

	.EXAMPLE
		PS C:\> Set-WebBrowserEmulation PowerShell.exe
#>
function Set-WebBrowserEmulation
{
	param
	(
		[ValidateNotNullOrEmpty()]
		[string]$ExecutableName = [System.IO.Path]::GetFileName([System.Diagnostics.Process]::GetCurrentProcess().MainModule.FileName)
	)
	
	#region Get IE Version
	$valueNames = 'svcVersion', 'svcUpdateVersion', 'Version', 'W2kVersion'
	
	$version = 0;
	for ($i = 0; $i -lt $valueNames.Length; $i++)
	{
		$objVal = [Microsoft.Win32.Registry]::GetValue('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer', $valueNames[$i], '0')
		$strVal = [System.Convert]::ToString($objVal)
		if ($strVal)
		{
			$iPos = $strVal.IndexOf('.')
			if ($iPos -gt 0)
			{
				$strVal = $strVal.Substring(0, $iPos)
			}
			
			$res = 0;
			if ([int]::TryParse($strVal, [ref]$res))
			{
				$version = [Math]::Max($version, $res)
			}
		}
	}
	
	if ($version -lt 7)
	{
		$version = 7000
	}
	else
	{
		$version = $version * 1000
	}
	#endregion
	
	[Microsoft.Win32.Registry]::SetValue('HKEY_CURRENT_USER\SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION', $ExecutableName, $version)
}


#endregion

$webbrowser1_DocumentCompleted = [System.Windows.Forms.WebBrowserDocumentCompletedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.WebBrowserDocumentCompletedEventArgs]
	#TODO: Place custom script here
	
}

$afterValidation_Paint = [System.Windows.Forms.PaintEventHandler]{
	
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	$panel1.FlatStyle = [System.Windows.Forms.FlatStyle]::Flat
	$panel1.FlatAppearance.BorderSize = 2
	$panel1.FlatAppearance.BorderColor = [System.Drawing.ColorTranslator]::FromHtml("#83C9F4")
}

$NomMachine_TextChanged = {
	#TODO: Place custom script here
	#	$NomMachine.Size.Width = New-Object System.Drawing.Point( 100, 100)
}

$panel2_Paint = [System.Windows.Forms.PaintEventHandler]{
	$labelPofgkhpofgkhpokfgh.Text = "La $global:Action est terminée"
	#	$richtextbox1.ReadOnly = $true
	#	$richtextbox1.Text = """
	#Merci à M. DELAHAYE pour avoir fait la première version du tool et la partie technique
	#Merci à T.BERNARD-GUELLE - pour avoir commencer un prototype de la version graphique
	#"""
}

$buttonQuitter_MouseDown = [System.Windows.Forms.MouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.MouseEventArgs]
	#TODO: Place custom script here
}

$picturebox2_Click = {
	#TODO: Place custom script here
	HideAllPanel
	$panelRemoveRename.Visible = $true
}

$richtextbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$button1_Click = {
	#TODO: Place custom script here
	HideAllPanel
	$panel1.Visible = $true
}

function Make-Button-Exec ($Name, $path, $x, $y)
{
	$Btn = New-Object System.Windows.Forms.Button
	$Btn.FlatStyle = [System.Windows.Forms.FlatStyle]::Flat
	$Btn.FlatAppearance.BorderSize = 0
	$Btn.Text = "$Name"
	$Btn.Width = 150
	$Btn.Height = 22
	$Btn.ForeColor = [System.Drawing.ColorTranslator]::FromHtml("#fff")
	$Btn.BackColor = [System.Drawing.ColorTranslator]::FromHtml("#121627")
	$Btn.Location = New-Object System.Drawing.Point($x, $y)
	$Btn.tag = "$path"
	$Btn.add_Click({
			Start-Process -FilePath $this.tag
		})
	return $Btn
}

$picturebox1_Click = {
	
}

$Restart_Click = {
	#TODO: Place custom script here
	Restart-Computer -Force
}

$picturebox3_Click = {
	$RestorationCaisse.Controls | Where{ $_.GetType().Name -eq "Button" } | ForEach{
		$x = $_.Location.X
		$y = $_.Location.Y
		$y = [System.Math]::Round(($y - ($Ghost.Height - 100)))
		$_.Location = New-Object System.Drawing.Point($x, $y)
	}
	
}

$picturebox4_Click = {
	#TODO: Place custom script here
	$RestorationCaisse.Controls | Where{ $_.GetType().Name -eq "Button" } | ForEach{
		$x = $_.Location.X
		$y = $_.Location.Y
		$y = [System.Math]::Round(($y + ($Ghost.Height - 100)))
		$_.Location = New-Object System.Drawing.Point($x, $y)
	}
}

$buttonSuprimer_Click = {
	$global:Action = "Delete"
	HideAllPanel
	$panelRemoveRename.Visible = $true
}
$buttonAjouter_Click = {
	$machineType = $TypeMachine.SelectedItem
	$NomdeMachine = $NomMachine.Text
	$buttonAjouter.Text = $machineType
	Add-Content -Path $global:WidgetPath -Value "$machineType,$NomdeMachine"
	HideAllPanel
	$panel1.Visible = $true
	RestartGhost
}

$buttonRename_Click = {
	$global:Action = "Rename"
	HideAllPanel
	$panelRemoveRename.Visible = $true
}

$picturebox6_Click = {
	$RestorationPc.Controls | Where{ $_.GetType().Name -eq "Button" } | ForEach{
		$x = $_.Location.X
		$y = $_.Location.Y
		$y = [System.Math]::Round(($y + ($Ghost.Height - 100)))
		$_.Location = New-Object System.Drawing.Point($x, $y)
	}
	
	
}

$picturebox5_Click = {
	#TODO: Place custom script here
	$RestorationPc.Controls | Where{ $_.GetType().Name -eq "Button" } | ForEach{
		$x = $_.Location.X
		$y = $_.Location.Y
		$y = [System.Math]::Round(($y - ($Ghost.Height - 100)))
		$_.Location = New-Object System.Drawing.Point($x, $y)
	}
}

############################################################
#                   Bouttons retours                       #
############################################################
$button2_Click = {
	#TODO: Place custom script here
	HideAllPanel
	$RestorationMenu.Visible = $true
}

$button3_Click = {
	#TODO: Place custom script here
	#TODO: Place custom script here
	
}

$picturebox7_Click = {
	#TODO: Place custom script here
	HideAllPanel
	$RestorationMenu.Visible = $true
}

$picturebox8_Click = {
	#TODO: Place custom script here
	HideAllPanel
	$RestorationMenu.Visible = $true
}

$picturebox9_Click = {
	#TODO: Place custom script here
	HideAllPanel
	$panel1.Visible = $true
}
############################################################
#                  FIN Bouttons retours                    #
############################################################
$picturebox10_Click = {
	$Ghost.Hide()
	Start-Process -FilePath "\\AEM-GHOST\srv-projet\Code\bin\x64\SettingDiskPart.exe" -Wait
	$Ghost.Show()
	
}

$picturebox11_Click = {
	#TODO: Place custom script here
	HideAllPanel
	$panel1.Visible = $true
}

$panelRemoveRename_Paint = [System.Windows.Forms.PaintEventHandler]{
	$listbox1.Items.Clear()
	foreach ($line in Get-Content $global:WidgetPath)
	{
		if ($line -ne "")
		{
			$listbox1.Items.Add($line)
		}
		
		
	}
}

$listbox1_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$listbox1_DoubleClick = {
	if ($global:Action -eq "Delete")
	{
		(Get-Content $global:WidgetPath).Replace($listbox1.SelectedItem, "") | Set-Content $global:WidgetPath
	}
	else
	{
		$newname = Read-Host -Prompt "Nouveau nom"
		$newname = $listbox1.SelectedItem.ToString().Split(",")[0] + "," + $newname
		(Get-Content $global:WidgetPath).Replace($listbox1.SelectedItem.ToString(), $newname) | Set-Content $global:WidgetPath
		
	}
	RestartGhost
}

$picturebox12_Click = {
	#TODO: Place custom script here
	HideAllPanel
	$AddButtonPanel.Visible = $true
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>